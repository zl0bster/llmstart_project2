"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π."""

import logging
import os
from typing import Dict, Any
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from app.clients.vision_client import create_vision_client, GPT4VisionClient, OpenRouterVisionClient
from app.services.media_processor import media_processor
from app.services.session_service import get_session_manager
from app.bot.keyboards import get_processing_keyboard
from app.core.config import settings

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
vision_client = None

logger = logging.getLogger(__name__)


def init_vision_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vision –∫–ª–∏–µ–Ω—Ç–∞."""
    global vision_client
    if vision_client is None:
        try:
            if settings.vision_provider == "openrouter":
                if settings.openrouter_api_key:
                    vision_client = OpenRouterVisionClient(
                        api_key=settings.openrouter_api_key,
                        model=settings.vision_model
                    )
                    logger.info(f"OpenRouter Vision –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {settings.vision_model}")
                else:
                    logger.error("–ù–µ—Ç API –∫–ª—é—á–∞ –¥–ª—è OpenRouter Vision")
                    return False
            elif settings.vision_provider == "gpt4_vision":
                if settings.openai_api_key:
                    vision_client = GPT4VisionClient(
                        api_key=settings.openai_api_key,
                        model=settings.vision_model
                    )
                    logger.info(f"GPT-4 Vision –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {settings.vision_model}")
                else:
                    logger.error("–ù–µ—Ç API –∫–ª—é—á–∞ –¥–ª—è GPT-4 Vision")
                    return False
            else:
                logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä Vision: {settings.vision_provider}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if not vision_client.is_available():
                logger.error("Vision –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                vision_client = None
                return False
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vision –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            vision_client = None
            return False
    
    return True


def validate_image_file(file_path: str) -> Dict[str, Any]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Returns:
        Dict[str, Any]: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Raises:
        ValueError: –ü—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º —Ñ–∞–π–ª–µ
    """
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        file_size = os.path.getsize(file_path)
        file_size_mb = file_size / (1024 * 1024)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size_mb > settings.max_image_mb:
            raise ValueError(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {file_size_mb:.1f}MB –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {settings.max_image_mb}MB")
        
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            from PIL import Image
            with Image.open(file_path) as img:
                width, height = img.size
                format_name = img.format
                mode = img.mode
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                max_res_str = settings.max_image_res  # –Ω–∞–ø—Ä–∏–º–µ—Ä "2048x2048"
                max_width, max_height = map(int, max_res_str.split('x'))
                
                if width > max_width or height > max_height:
                    raise ValueError(
                        f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ {width}x{height} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {max_width}x{max_height}"
                    )
                
                metadata = {
                    'width': width,
                    'height': height,
                    'format': format_name,
                    'mode': mode,
                    'file_size': file_size,
                    'file_size_mb': round(file_size_mb, 2)
                }
                
        except ImportError:
            # PIL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
            logger.warning("PIL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            metadata = {
                'width': None,
                'height': None,
                'format': None,
                'mode': None,
                'file_size': file_size,
                'file_size_mb': round(file_size_mb, 2)
            }
        
        logger.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {metadata}")
        
        return metadata
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {file_path}: {e}")
        raise


@router.message(F.photo)
async def handle_photo_message(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    session_id = None
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not init_vision_client():
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
                "–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º.",
                parse_mode="HTML"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        session_manager = get_session_manager()
        session_id = session_manager.get_or_create_session(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer(
            "üì∏ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>\n\n"
            "‚è≥ –ò–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Vision API...",
            reply_markup=get_processing_keyboard(),
            parse_mode="HTML"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
        photo = message.photo[-1]  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ - —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ
        file_id = photo.file_id
        file_size = photo.file_size
        
        logger.info(f"–§–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: file_id: {file_id}, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size and file_size > settings.max_image_mb * 1024 * 1024:
            await processing_msg.edit_text(
                f"‚ùå <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π</b>\n\n"
                f"–†–∞–∑–º–µ—Ä {file_size/(1024*1024):.1f}MB –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç "
                f"{settings.max_image_mb}MB.",
                parse_mode="HTML"
            )
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(file_id)
        file_content = await bot.download_file(file.file_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏
        file_extension = '.jpg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Telegram —Ñ–æ—Ç–æ –∫–∞–∫ JPG
        if hasattr(file, 'file_path') and file.file_path:
            import os
            _, ext = os.path.splitext(file.file_path)
            if ext:
                file_extension = ext
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        temp_filename = f"photo_{file_id}{file_extension}"
        saved_file_path = media_processor.save_photo_file(
            file_content.read(), temp_filename, user_id
        )
        
        logger.info(f"–§–æ—Ç–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {saved_file_path}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import shutil
        logs_photo_path = os.path.join(settings.log_dir, f"debug_photo_{os.path.basename(saved_file_path)}")
        try:
            shutil.copy2(saved_file_path, logs_photo_path)
            logger.info(f"–ö–æ–ø–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {logs_photo_path}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ª–æ–≥–∏: {e}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            image_metadata = validate_image_file(saved_file_path)
            logger.info(f"–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
            logger.info(f"  - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {image_metadata.get('file_size', 0)} –±–∞–π—Ç ({image_metadata.get('file_size_mb', 0)} –ú–ë)")
            logger.info(f"  - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {image_metadata.get('width', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}x{image_metadata.get('height', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            logger.info(f"  - –§–æ—Ä–º–∞—Ç: {image_metadata.get('format', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            logger.info(f"  - –†–µ–∂–∏–º: {image_metadata.get('mode', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            logger.info(f"  - –ü—É—Ç—å: {saved_file_path}")
            logger.info(f"  - –ö–æ–ø–∏—è –≤ –ª–æ–≥–∞—Ö: {logs_photo_path}")
        except ValueError as e:
            await processing_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
                f"{str(e)}",
                parse_mode="HTML"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await processing_msg.edit_text(
            "üì∏ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>\n\n"
            "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...",
            reply_markup=get_processing_keyboard(),
            parse_mode="HTML"
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Vision API
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Vision API...")
        logger.info(f"  - –ö–ª–∏–µ–Ω—Ç: {type(vision_client).__name__}")
        logger.info(f"  - –ú–æ–¥–µ–ª—å: {getattr(vision_client, 'model', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        extracted_text = vision_client.analyze_image(saved_file_path)
        
        logger.info(f"Vision API –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        logger.info(f"  - –î–ª–∏–Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"  - –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {extracted_text[:200]}...")
        logger.debug(f"–ü–æ–ª–Ω—ã–π –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {extracted_text}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–µ—Å—Å–∏—é
        session_manager.add_message(user_id, f"[–§–û–¢–û -> –¢–ï–ö–°–¢]: {extracted_text}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        preview_text = extracted_text[:300] + "..." if len(extracted_text) > 300 else extracted_text
        await processing_msg.edit_text(
            "üì∏ <b>–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
            f"üìù <i>–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</i>\n{preview_text}\n\n"
            "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...",
            reply_markup=get_processing_keyboard(),
            parse_mode="HTML"
        )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ text_handlers
        from app.bot.handlers.text_handlers import process_text_with_llm
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞–π–ø–ª–∞–π–Ω
        await process_text_with_llm(
            user_id=user_id,
            chat_id=chat_id,
            session_id=session_id,
            text=extracted_text,
            original_message=message,
            processing_message=processing_msg,
            is_photo_extraction=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {e}")
        
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º.",
            parse_mode="HTML"
        )


@router.message(F.document)
async def handle_document_message(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    document = message.document
    if not document.mime_type or not document.mime_type.startswith('image/'):
        await message.answer(
            "üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω</b>\n\n"
            "–Ø —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
            "–ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∫–∞–∫ —Ñ–æ—Ç–æ.",
            parse_mode="HTML"
        )
        return
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {document.file_name}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not init_vision_client():
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
                "–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º.",
                parse_mode="HTML"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        session_manager = get_session_manager()
        session_id = session_manager.get_or_create_session(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer(
            "üìÑ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>\n\n"
            "‚è≥ –ò–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Vision API...",
            reply_markup=get_processing_keyboard(),
            parse_mode="HTML"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        file_id = document.file_id
        file_size = document.file_size
        file_name = document.file_name or "document.jpg"
        
        logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file_name}, file_id: {file_id}, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size and file_size > settings.max_image_mb * 1024 * 1024:
            await processing_msg.edit_text(
                f"‚ùå <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π</b>\n\n"
                f"–†–∞–∑–º–µ—Ä {file_size/(1024*1024):.1f}MB –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç "
                f"{settings.max_image_mb}MB.",
                parse_mode="HTML"
            )
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(file_id)
        file_content = await bot.download_file(file.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        saved_file_path = media_processor.save_photo_file(
            file_content.read(), file_name, user_id
        )
        
        logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {saved_file_path}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logs_photo_path = os.path.join(settings.log_dir, f"debug_document_{os.path.basename(saved_file_path)}")
        try:
            shutil.copy2(saved_file_path, logs_photo_path)
            logger.info(f"–ö–æ–ø–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {logs_photo_path}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ª–æ–≥–∏: {e}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            image_metadata = validate_image_file(saved_file_path)
            logger.info(f"–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
            logger.info(f"  - –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è: {file_name}")
            logger.info(f"  - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {image_metadata.get('file_size', 0)} –±–∞–π—Ç ({image_metadata.get('file_size_mb', 0)} –ú–ë)")
            logger.info(f"  - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {image_metadata.get('width', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}x{image_metadata.get('height', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            logger.info(f"  - –§–æ—Ä–º–∞—Ç: {image_metadata.get('format', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            logger.info(f"  - –†–µ–∂–∏–º: {image_metadata.get('mode', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            logger.info(f"  - –ü—É—Ç—å: {saved_file_path}")
            logger.info(f"  - –ö–æ–ø–∏—è –≤ –ª–æ–≥–∞—Ö: {logs_photo_path}")
        except ValueError as e:
            await processing_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
                f"{str(e)}",
                parse_mode="HTML"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await processing_msg.edit_text(
            "üìÑ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>\n\n"
            "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...",
            reply_markup=get_processing_keyboard(),
            parse_mode="HTML"
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Vision API
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Vision API...")
        logger.info(f"  - –ö–ª–∏–µ–Ω—Ç: {type(vision_client).__name__}")
        logger.info(f"  - –ú–æ–¥–µ–ª—å: {getattr(vision_client, 'model', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        extracted_text = vision_client.analyze_image(saved_file_path)
        
        logger.info(f"Vision API –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        logger.info(f"  - –î–ª–∏–Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"  - –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {extracted_text[:200]}...")
        logger.debug(f"–ü–æ–ª–Ω—ã–π –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞: {extracted_text}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–µ—Å—Å–∏—é
        session_manager.add_message(user_id, f"[–î–û–ö–£–ú–ï–ù–¢ -> –¢–ï–ö–°–¢]: {extracted_text}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        preview_text = extracted_text[:300] + "..." if len(extracted_text) > 300 else extracted_text
        await processing_msg.edit_text(
            "üìÑ <b>–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
            f"üìù <i>–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</i>\n{preview_text}\n\n"
            "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...",
            reply_markup=get_processing_keyboard(),
            parse_mode="HTML"
        )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ text_handlers
        from app.bot.handlers.text_handlers import process_text_with_llm
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞–π–ø–ª–∞–π–Ω
        await process_text_with_llm(
            user_id=user_id,
            chat_id=message.chat.id,
            session_id=session_id,
            text=extracted_text,
            original_message=message,
            processing_message=processing_msg,
            is_photo_extraction=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç {user_id}: {e}")
        
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º.",
            parse_mode="HTML"
        )