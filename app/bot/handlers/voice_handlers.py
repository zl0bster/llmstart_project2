"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""

import logging
import os
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from app.clients.speech_client import create_speech_client, WhisperClient, WhisperAPIClient
from app.services.media_processor import media_processor
from app.services.session_manager import SessionManager
from app.bot.keyboards import get_processing_keyboard
from app.core.config import settings

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
speech_client = None
session_manager = SessionManager(timeout_minutes=settings.session_timeout_min)

logger = logging.getLogger(__name__)


def init_speech_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Speech –∫–ª–∏–µ–Ω—Ç–∞."""
    global speech_client
    if speech_client is None:
        try:
            if settings.speech_provider == "whisper":
                if settings.openai_api_key:
                    speech_client = WhisperClient(
                        api_key=settings.openai_api_key,
                        model=settings.speech_model
                    )
                    logger.info(f"Whisper –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {settings.speech_model}")
                elif settings.openrouter_api_key:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter –¥–ª—è Whisper
                    speech_client = WhisperClient(
                        api_key=settings.openrouter_api_key,
                        model=settings.speech_model,
                        base_url="https://openrouter.ai/api/v1"
                    )
                    logger.info(f"Whisper —á–µ—Ä–µ–∑ OpenRouter –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    logger.error("–ù–µ—Ç API –∫–ª—é—á–∞ –¥–ª—è Whisper")
                    return False
            elif settings.speech_provider == "whisperapi":
                if settings.whisperapi_api_key:
                    speech_client = WhisperAPIClient(
                        api_key=settings.whisperapi_api_key,
                        model=settings.speech_model
                    )
                    logger.info(f"WhisperAPI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {settings.speech_model}")
                else:
                    logger.error("–ù–µ—Ç API –∫–ª—é—á–∞ –¥–ª—è WhisperAPI")
                    return False
            else:
                logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–µ—á–∏: {settings.speech_provider}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if not speech_client.is_available():
                logger.error("Speech –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                speech_client = None
                return False
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Speech –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            speech_client = None
            return False
    
    return True


@router.message(F.voice)
async def handle_voice_message(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    session_id = None
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not init_speech_client():
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞</b>\n\n"
                "–°–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º.",
                parse_mode="HTML"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        session_id = session_manager.get_or_create_session(user_id)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer(
            "üé§ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</b>\n\n"
            "‚è≥ –ò–¥–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ Whisper API...",
            reply_markup=get_processing_keyboard(),
            parse_mode="HTML"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Ñ–∞–π–ª–µ
        voice = message.voice
        file_id = voice.file_id
        file_duration = voice.duration
        
        logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {file_duration}—Å, file_id: {file_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if file_duration > settings.max_audio_min * 60:
            await processing_msg.edit_text(
                f"‚ùå <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π</b>\n\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {file_duration//60}:{file_duration%60:02d} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç "
                f"{settings.max_audio_min} –º–∏–Ω—É—Ç.",
                parse_mode="HTML"
            )
            state_machine.transition_to_state(user_id, BotState.idle)
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(file_id)
        file_content = await bot.download_file(file.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        file_extension = '.ogg'  # Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç voice –∫–∞–∫ OGG
        temp_filename = f"voice_{file_id}{file_extension}"
        saved_file_path = media_processor.save_audio_file(
            file_content.read(), temp_filename, user_id
        )
        
        logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {saved_file_path}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        import shutil
        import os
        logs_audio_path = os.path.join(settings.log_dir, f"debug_audio_{os.path.basename(saved_file_path)}")
        try:
            shutil.copy2(saved_file_path, logs_audio_path)
            logger.info(f"–ö–æ–ø–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {logs_audio_path}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –ª–æ–≥–∏: {e}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        audio_metadata = media_processor.validate_audio_file(saved_file_path)
        logger.info(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ: {audio_metadata}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Whisper
        converted_file_path = media_processor.convert_audio_for_whisper(saved_file_path)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await processing_msg.edit_text(
            "üé§ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</b>\n\n"
            "üîÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç...",
            reply_markup=get_processing_keyboard(),
            parse_mode="HTML"
        )
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Whisper
        transcribed_text = speech_client.transcribe_audio(converted_file_path)
        
        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(transcribed_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.debug(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {transcribed_text}")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            os.remove(converted_file_path)
            logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {converted_file_path}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {converted_file_path}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Å–µ—Å—Å–∏—é
        session_manager.add_message(session_id, f"[–ì–û–õ–û–° -> –¢–ï–ö–°–¢]: {transcribed_text}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await processing_msg.edit_text(
            "üé§ <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"üìù <i>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</i>\n{transcribed_text[:200]}...\n\n"
            "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...",
            reply_markup=get_processing_keyboard(),
            parse_mode="HTML"
        )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ text_handlers
        from app.bot.handlers.text_handlers import process_text_with_llm
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞–π–ø–ª–∞–π–Ω
        await process_text_with_llm(
            user_id=user_id,
            chat_id=chat_id,
            session_id=session_id,
            text=transcribed_text,
            original_message=message,
            processing_message=processing_msg,
            is_voice_transcription=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {e}")
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º.",
            parse_mode="HTML"
        )
