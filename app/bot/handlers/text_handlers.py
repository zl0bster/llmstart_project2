"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from app.clients.llm_client import OpenRouterLLMClient
from app.clients.lmstudio_client import LMStudioLLMClient
from app.clients.ollama_client import OllamaLLMClient
from app.services.session_service import get_session_manager
from app.models.schemas import BotState
from app.bot.keyboards import (
    get_validation_keyboard, 
    get_processing_keyboard,
    get_clarification_keyboard,
    get_confirmation_keyboard,
    get_cancellation_confirmation_keyboard
)
from app.prompts.system_prompts import format_orders_for_validation
from app.core.config import settings

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
llm_client = None


def init_llm_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –∫–ª–∏–µ–Ω—Ç–∞."""
    global llm_client
    if llm_client is None:
        try:
            if settings.llm_provider == "lmstudio":
                llm_client = LMStudioLLMClient(
                    base_url=settings.lmstudio_base_url,
                    model=settings.text_model
                )
                logging.info(f"LM Studio –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {settings.text_model}")
            elif settings.llm_provider == "openrouter" and settings.openrouter_api_key:
                llm_client = OpenRouterLLMClient(
                    api_key=settings.openrouter_api_key,
                    model=settings.text_model
                )
                logging.info(f"OpenRouter –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {settings.text_model}")
            elif settings.llm_provider == "ollama":
                llm_client = OllamaLLMClient(
                    base_url=settings.ollama_base_url,
                    model=settings.text_model,
                    auto_pull=settings.ollama_auto_pull,
                    timeout_sec=settings.ollama_timeout_sec,
                    num_predict=settings.ollama_num_predict,
                    temperature=settings.ollama_temperature
                )
                logging.info(f"Ollama –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {settings.text_model}")
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LLM –∫–ª–∏–µ–Ω—Ç. –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {settings.llm_provider}")
                return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            llm_client = None
            return False
    
    return llm_client is not None


@router.message(F.text)
async def handle_text_message(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    text = message.text
    
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text[:100]}...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not init_llm_client():
        await message.answer(
            "‚ùå LLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    session_manager = get_session_manager()
    session_id = session_manager.get_or_create_session(user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏
    session_manager.add_message(user_id, text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(
        "üîÑ –ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...",
        reply_markup=get_processing_keyboard()
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏
        session_history = session_manager.get_session_history(user_id)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ LLM
        llm_response = llm_client.process_text(text, session_history)
        
        if llm_response.requires_correction:
            # –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ
            await processing_msg.edit_text(
                f"‚ùì {llm_response.clarification_question}",
                reply_markup=get_clarification_keyboard()
            )
        else:
            # –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
            if llm_response.orders:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ —Å–µ—Å—Å–∏–∏
                session_manager.set_extracted_orders(user_id, llm_response.orders)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                validation_text = format_orders_for_validation(llm_response.orders)
                
                await processing_msg.edit_text(
                    validation_text,
                    reply_markup=get_confirmation_keyboard()
                )
            else:
                await processing_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –æ—Ç—á–µ—Ç –µ—â–µ —Ä–∞–∑."
                )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


async def process_text_with_llm(
    user_id: int, 
    chat_id: int, 
    session_id: str, 
    text: str, 
    original_message: Message, 
    processing_message: Message = None,
    is_voice_transcription: bool = False,
    is_photo_extraction: bool = False
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ LLM (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤).
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id: ID —á–∞—Ç–∞
        session_id: ID —Å–µ—Å—Å–∏–∏
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        original_message: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        processing_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        is_voice_transcription: –§–ª–∞–≥ —á—Ç–æ —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not init_llm_client():
            error_text = (
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>\n\n"
                "LLM —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
            if processing_message:
                await processing_message.edit_text(error_text, parse_mode="HTML")
            else:
                await original_message.answer(error_text, parse_mode="HTML")
            return
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        from app.services.state_machine import StateMachine
        state_machine = StateMachine()
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        logging.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PROCESSING")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not processing_message:
            if is_voice_transcription:
                prefix = "üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é..."
            elif is_photo_extraction:
                prefix = "üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç..."
            else:
                prefix = "üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            processing_message = await original_message.answer(
                f"{prefix}\n\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ LLM...",
                reply_markup=get_processing_keyboard(),
                parse_mode="HTML"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        session_manager = get_session_manager()
        session_history = session_manager.get_session_history(user_id)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ LLM
        llm_response = llm_client.process_text(text, session_history)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏
        if is_voice_transcription:
            prefix = "[–ì–û–õ–û–° -> –¢–ï–ö–°–¢]"
        elif is_photo_extraction:
            prefix = "[–§–û–¢–û -> –¢–ï–ö–°–¢]"
        else:
            prefix = "[–¢–ï–ö–°–¢]"
        session_manager.add_message(user_id, f"{prefix}: {text}")
        session_manager.add_message(user_id, f"[LLM]: {llm_response.model_dump_json()}")
        
        logging.info(f"LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: "
                    f"–∏–∑–≤–ª–µ—á–µ–Ω–æ {len(llm_response.orders)} –∑–∞–∫–∞–∑–æ–≤, "
                    f"—Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è: {llm_response.requires_correction}")
        
        if llm_response.requires_correction and llm_response.clarification_question:
            # –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ  
            logging.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CLARIFICATION")
            
            await processing_message.edit_text(
                f"‚ùì <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ</b>\n\n{llm_response.clarification_question}",
                parse_mode="HTML",
                reply_markup=get_clarification_keyboard()
            )
        else:
            # –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
            if llm_response.orders:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ —Å–µ—Å—Å–∏–∏
                session_manager.set_extracted_orders(user_id, llm_response.orders)
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                logging.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CONFIRMATION")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                validation_text = format_orders_for_validation(llm_response.orders)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö
                if is_voice_transcription:
                    source_info = "üé§ <i>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</i>\n\n"
                elif is_photo_extraction:
                    source_info = "üì∏ <i>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</i>\n\n"
                else:
                    source_info = ""
                
                await processing_message.edit_text(
                    source_info + validation_text,
                    parse_mode="HTML",
                    reply_markup=get_confirmation_keyboard()
                )
            else:
                logging.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ IDLE")
                
                source_info = "–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è" if is_voice_transcription else "—Ç–µ–∫—Å—Ç–∞"
                await processing_message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö –∏–∑ {source_info}. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –æ—Ç—á–µ—Ç –µ—â–µ —Ä–∞–∑.",
                    parse_mode="HTML"
                )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ LLM: {e}")
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ idle —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logging.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ IDLE –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
        
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        if processing_message:
            await processing_message.edit_text(error_text)
        else:
            await original_message.answer(error_text)


@router.callback_query(F.data == "confirm_data")
async def handle_confirm_data(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ —Å–µ—Å—Å–∏–∏
    session_manager = get_session_manager()
    orders = session_manager.get_extracted_orders(user_id)
    
    if orders:
        # TODO: –í –∏—Ç–µ—Ä–∞—Ü–∏–∏ 3 –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        orders_text = "\n".join([
            f"‚Ä¢ –ó–∞–∫–∞–∑ #{order.order_id}: {order.status.value if order.status else '–Ω–µ —É–∫–∞–∑–∞–Ω'} - {order.comment or '–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}"
            for order in orders
        ])
        
        await callback.message.edit_text(
            f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:</b>\n\n{orders_text}\n\n"
            f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reports –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤."
        )
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        session_manager.clear_session(user_id)
        
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª {len(orders)} –∑–∞–∫–∞–∑–æ–≤")
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –µ—â–µ —Ä–∞–∑."
        )
    
    await callback.answer()


@router.callback_query(F.data == "correct_data")
async def handle_correct_data(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
        "–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ò–∑–º–µ–Ω–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ 10409 –Ω–∞ '–≥–æ–¥–Ω–æ'\" –∏–ª–∏ \"–î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É 10494\"."
    )
    await callback.answer()


@router.callback_query(F.data == "cancel_data")
async def handle_cancel_data(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–∞–Ω–Ω—ã—Ö."""
    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.",
        reply_markup=get_cancellation_confirmation_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "confirm_cancel")
async def handle_confirm_cancel(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã."""
    user_id = callback.from_user.id
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    session_manager = get_session_manager()
    session_manager.clear_session(user_id)
    
    await callback.message.edit_text(
        "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã."
    )
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")
    await callback.answer()


@router.callback_query(F.data == "stop_processing")
async def handle_stop_processing(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    user_id = callback.from_user.id
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    session_manager = get_session_manager()
    session_manager.clear_session(user_id)
    
    await callback.message.edit_text(
        "‚èπÔ∏è <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã."
    )
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É")
    await callback.answer()
