"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–∞–º –û–¢–ö.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤:
- –°–≤–æ–¥–∫–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏)
- CSV —Ñ–∞–π–ª—ã (–¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞)
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥—ã: –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è
"""

import csv
import logging
import tempfile
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional, Tuple
from pathlib import Path

from app.models.database import User, Inspection
from app.core.database import get_db_session
from sqlalchemy import and_, func

logger = logging.getLogger(__name__)


class ReportService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–æ–≤."""
        self.temp_dir = Path(tempfile.gettempdir()) / "otk_reports"
        self.temp_dir.mkdir(exist_ok=True)
        logger.info("ReportService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def generate_daily_summary(self, user_id: Optional[int] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É –∑–∞ –¥–µ–Ω—å.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ None, —Ç–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            
        Returns:
            str: –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        """
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            start_date, end_date = self._get_date_range('day')
            stats = self._get_statistics(start_date, end_date, user_id)
            
            if not stats['total_inspections']:
                return self._format_empty_report('–¥–µ–Ω—å')
            
            summary = self._format_summary_report(stats, '–¥–µ–Ω—å')
            
            logger.info(f"–î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {stats['total_inspections']} –ø—Ä–æ–≤–µ—Ä–æ–∫")
            return summary
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
    
    def generate_weekly_summary(self, user_id: Optional[int] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ None, —Ç–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            
        Returns:
            str: –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        """
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            start_date, end_date = self._get_date_range('week')
            stats = self._get_statistics(start_date, end_date, user_id)
            
            if not stats['total_inspections']:
                return self._format_empty_report('–Ω–µ–¥–µ–ª—é')
            
            summary = self._format_summary_report(stats, '–Ω–µ–¥–µ–ª—é')
            
            logger.info(f"–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {stats['total_inspections']} –ø—Ä–æ–≤–µ—Ä–æ–∫")
            return summary
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
    
    def generate_daily_csv(self, user_id: Optional[int] = None) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –¥–µ–Ω—å.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ None, —Ç–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            
        Returns:
            Optional[str]: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ CSV –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            start_date, end_date = self._get_date_range('day')
            inspections = self._get_inspections(start_date, end_date, user_id)
            
            if not inspections:
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ CSV –æ—Ç—á–µ—Ç–∞")
                return None
            
            date_str = start_date.strftime('%Y-%m-%d')
            filename = f"otk_daily_report_{date_str}.csv"
            if user_id:
                filename = f"otk_daily_report_user{user_id}_{date_str}.csv"
            
            file_path = self.temp_dir / filename
            self._write_csv_file(file_path, inspections)
            
            logger.info(f"–î–Ω–µ–≤–Ω–æ–π CSV —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {file_path}, {len(inspections)} –∑–∞–ø–∏—Å–µ–π")
            return str(file_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ CSV: {e}")
            return None
    
    def generate_weekly_csv(self, user_id: Optional[int] = None) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –Ω–µ–¥–µ–ª—é.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ None, —Ç–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            
        Returns:
            Optional[str]: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ CSV –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            start_date, end_date = self._get_date_range('week')
            inspections = self._get_inspections(start_date, end_date, user_id)
            
            if not inspections:
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ CSV –æ—Ç—á–µ—Ç–∞")
                return None
            
            week_str = start_date.strftime('%Y-W%W')
            filename = f"otk_weekly_report_{week_str}.csv"
            if user_id:
                filename = f"otk_weekly_report_user{user_id}_{week_str}.csv"
            
            file_path = self.temp_dir / filename
            self._write_csv_file(file_path, inspections)
            
            logger.info(f"–ù–µ–¥–µ–ª—å–Ω—ã–π CSV —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {file_path}, {len(inspections)} –∑–∞–ø–∏—Å–µ–π")
            return str(file_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ CSV: {e}")
            return None
    
    def get_available_reports(self) -> List[Dict[str, str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤.
        
        Returns:
            List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        """
        return [
            {
                'type': 'daily_summary',
                'name': 'üìä –°–≤–æ–¥–∫–∞ –∑–∞ –¥–µ–Ω—å',
                'description': '–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è'
            },
            {
                'type': 'weekly_summary',
                'name': 'üìà –°–≤–æ–¥–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é',
                'description': '–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é'
            },
            {
                'type': 'daily_csv',
                'name': 'üìÑ CSV –∑–∞ –¥–µ–Ω—å',
                'description': '–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV'
            },
            {
                'type': 'weekly_csv',
                'name': 'üìã CSV –∑–∞ –Ω–µ–¥–µ–ª—é',
                'description': '–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV'
            }
        ]
    
    def cleanup_old_files(self, days: int = 1) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤.
        
        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        try:
            cutoff_date = datetime.now() - timedelta(days=days)
            deleted_count = 0
            
            for file_path in self.temp_dir.glob("*.csv"):
                if file_path.stat().st_mtime < cutoff_date.timestamp():
                    file_path.unlink()
                    deleted_count += 1
            
            if deleted_count > 0:
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–æ–≤")
            
            return deleted_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
            return 0
    
    def _get_date_range(self, period: str) -> Tuple[datetime, datetime]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
        
        Args:
            period: 'day' –∏–ª–∏ 'week'
            
        Returns:
            Tuple[datetime, datetime]: –ù–∞—á–∞–ª—å–Ω–∞—è –∏ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç—ã
        """
        now = datetime.now()
        
        if period == 'day':
            start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
            end_date = start_date + timedelta(days=1)
        elif period == 'week':
            # –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
            days_since_monday = now.weekday()
            start_date = (now - timedelta(days=days_since_monday)).replace(
                hour=0, minute=0, second=0, microsecond=0
            )
            end_date = start_date + timedelta(days=7)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥: {period}")
        
        return start_date, end_date
    
    def _get_statistics(self, start_date: datetime, end_date: datetime, 
                       user_id: Optional[int] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        
        Args:
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict[str, Any]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        try:
            with get_db_session() as db:
                # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                query = db.query(Inspection).filter(
                    and_(
                        Inspection.created_at >= start_date,
                        Inspection.created_at < end_date
                    )
                )
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if user_id:
                    user = db.query(User).filter(User.telegram_id == user_id).first()
                    if user:
                        query = query.filter(Inspection.user_id == user.id)
                    else:
                        return self._empty_stats()
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                inspections = query.all()
                
                if not inspections:
                    return self._empty_stats()
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total = len(inspections)
                approved = sum(1 for i in inspections if i.status == "–≥–æ–¥–Ω–æ")
                rework = sum(1 for i in inspections if i.status == "–≤ –¥–æ—Ä–∞–±–æ—Ç–∫—É")
                reject = sum(1 for i in inspections if i.status == "–≤ –±—Ä–∞–∫")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤)
                users_stats = {}
                if not user_id:
                    for inspection in inspections:
                        user_id_key = inspection.user_id
                        if user_id_key not in users_stats:
                            users_stats[user_id_key] = {
                                'name': inspection.user.name or f"User_{inspection.user.telegram_id}",
                                'total': 0,
                                'approved': 0,
                                'rework': 0,
                                'reject': 0
                            }
                        
                        users_stats[user_id_key]['total'] += 1
                        if inspection.status == "–≥–æ–¥–Ω–æ":
                            users_stats[user_id_key]['approved'] += 1
                        elif inspection.status == "–≤ –¥–æ—Ä–∞–±–æ—Ç–∫—É":
                            users_stats[user_id_key]['rework'] += 1
                        elif inspection.status == "–≤ –±—Ä–∞–∫":
                            users_stats[user_id_key]['reject'] += 1
                
                return {
                    'total_inspections': total,
                    'approved': approved,
                    'rework': rework,
                    'reject': reject,
                    'success_rate': round(approved / total * 100, 1) if total > 0 else 0,
                    'period_start': start_date,
                    'period_end': end_date,
                    'users_stats': users_stats,
                    'unique_orders': len(set(i.order_id for i in inspections)),
                    'with_comments': sum(1 for i in inspections if i.comment)
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return self._empty_stats()
    
    def _get_inspections(self, start_date: datetime, end_date: datetime,
                        user_id: Optional[int] = None) -> List[Inspection]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥ –¥–ª—è CSV —ç–∫—Å–ø–æ—Ä—Ç–∞.
        
        Args:
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞  
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            List[Inspection]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫
        """
        try:
            with get_db_session() as db:
                query = (
                    db.query(Inspection)
                    .join(User)
                    .filter(
                        and_(
                            Inspection.created_at >= start_date,
                            Inspection.created_at < end_date
                        )
                    )
                    .order_by(Inspection.created_at.desc())
                )
                
                if user_id:
                    user = db.query(User).filter(User.telegram_id == user_id).first()
                    if user:
                        query = query.filter(Inspection.user_id == user.id)
                    else:
                        return []
                
                return query.all()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫: {e}")
            return []
    
    def _write_csv_file(self, file_path: Path, inspections: List[Inspection]) -> None:
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ CSV —Ñ–∞–π–ª.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            inspections: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫
        """
        with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
                '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞', 
                '–°—Ç–∞—Ç—É—Å',
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
                '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä',
                'ID —Å–µ—Å—Å–∏–∏'
            ]
            
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            
            for inspection in inspections:
                writer.writerow({
                    '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': inspection.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                    '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞': inspection.order_id,
                    '–°—Ç–∞—Ç—É—Å': inspection.status,
                    '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': inspection.comment or '',
                    '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä': inspection.user.name or f"User_{inspection.user.telegram_id}",
                    'ID —Å–µ—Å—Å–∏–∏': inspection.session_id[:8] + '...'  # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π ID
                })
    
    def _format_summary_report(self, stats: Dict[str, Any], period: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç.
        
        Args:
            stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            period: –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        report_lines = [
            f"üìä <b>–°–≤–æ–¥–∫–∞ –∑–∞ {period}</b>",
            f"üìÖ {stats['period_start'].strftime('%d.%m.%Y')} - {stats['period_end'].strftime('%d.%m.%Y')}",
            "",
            "üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
            f"üîç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {stats['total_inspections']}",
            f"üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {stats['unique_orders']}",
            f"üí¨ –° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {stats['with_comments']}",
            "",
            "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫:</b>",
            f"‚úÖ –ì–æ–¥–Ω–æ: {stats['approved']} ({stats['approved']/stats['total_inspections']*100:.1f}%)",
            f"üîß –í –¥–æ—Ä–∞–±–æ—Ç–∫—É: {stats['rework']} ({stats['rework']/stats['total_inspections']*100:.1f}%)",
            f"‚ùå –í –±—Ä–∞–∫: {stats['reject']} ({stats['reject']/stats['total_inspections']*100:.1f}%)",
            "",
            f"üéØ <b>–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']}%</b>"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –æ–±—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
        if stats['users_stats']:
            report_lines.extend([
                "",
                "üë• <b>–ü–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞–º:</b>"
            ])
            
            for user_stat in stats['users_stats'].values():
                success_rate = round(user_stat['approved'] / user_stat['total'] * 100, 1) if user_stat['total'] > 0 else 0
                report_lines.append(
                    f"‚Ä¢ {user_stat['name']}: {user_stat['total']} –ø—Ä–æ–≤–µ—Ä–æ–∫ ({success_rate}% —É—Å–ø–µ—à–Ω—ã—Ö)"
                )
        
        return "\n".join(report_lines)
    
    def _format_empty_report(self, period: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º –æ—Ç—á–µ—Ç–µ.
        
        Args:
            period: –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞
            
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º –æ—Ç—á–µ—Ç–µ
        """
        return f"üìä <b>–°–≤–æ–¥–∫–∞ –∑–∞ {period}</b>\n\n" \
               f"üìà –ó–∞ {period} –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å.\n\n" \
               f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤."
    
    def _empty_stats(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
        
        Returns:
            Dict[str, Any]: –ü—É—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        return {
            'total_inspections': 0,
            'approved': 0,
            'rework': 0,
            'reject': 0,
            'success_rate': 0,
            'period_start': datetime.now(),
            'period_end': datetime.now(),
            'users_stats': {},
            'unique_orders': 0,
            'with_comments': 0
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
report_service = ReportService()
