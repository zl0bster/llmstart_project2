"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞.

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é: –∞—É–¥–∏–æ -> —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è -> –∞–Ω–∞–ª–∏–∑ -> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.core.config import settings
from app.clients.speech_client import create_speech_client, WhisperClient
from app.services.media_processor import media_processor
from app.clients.llm_client import OpenRouterLLMClient
from app.clients.lmstudio_client import LMStudioLLMClient
from app.clients.ollama_client import OllamaLLMClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


class VoicePipelineTest:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤."""
        self.speech_client = None
        self.llm_client = None
        self.test_user_id = 12345
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç Whisper
        self.test_transcriptions = [
            "–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä —Å10409 –≥–æ–¥–Ω–æ –±–µ–∑ –∑–∞–º–µ—á–∞–Ω–∏–π",
            "–ó–∞–∫–∞–∑ —Å10494 –≤ –¥–æ—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–µ—Ñ–µ–∫—Ç –ø–æ–∫—Ä–∞—Å–∫–∏",
            "—Å10401 –≤ –±—Ä–∞–∫ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–≤–∞—Ä–∫–∞ —Å10402 –≥–æ–¥–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç"
        ]
    
    def init_speech_client(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Speech –∫–ª–∏–µ–Ω—Ç–∞."""
        try:
            if settings.speech_provider == "whisper":
                if settings.openai_api_key:
                    self.speech_client = WhisperClient(
                        api_key=settings.openai_api_key,
                        model=settings.speech_model
                    )
                    logger.info(f"Whisper –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {settings.speech_model}")
                elif settings.openrouter_api_key:
                    self.speech_client = WhisperClient(
                        api_key=settings.openrouter_api_key,
                        model=settings.speech_model,
                        base_url="https://openrouter.ai/api/v1"
                    )
                    logger.info(f"Whisper —á–µ—Ä–µ–∑ OpenRouter –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    logger.error("–ù–µ—Ç API –∫–ª—é—á–∞ –¥–ª—è Whisper")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if not self.speech_client.is_available():
                logger.error("Speech –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Speech –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    def init_llm_client(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –∫–ª–∏–µ–Ω—Ç–∞."""
        try:
            if settings.llm_provider == "lmstudio":
                self.llm_client = LMStudioLLMClient(
                    base_url=settings.lmstudio_base_url,
                    model=settings.text_model
                )
                logger.info(f"LM Studio –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {settings.text_model}")
            elif settings.llm_provider == "openrouter" and settings.openrouter_api_key:
                self.llm_client = OpenRouterLLMClient(
                    api_key=settings.openrouter_api_key,
                    model=settings.text_model
                )
                logger.info(f"OpenRouter –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {settings.text_model}")
            elif settings.llm_provider == "ollama":
                self.llm_client = OllamaLLMClient(
                    base_url=settings.ollama_base_url,
                    model=settings.text_model
                )
                logger.info(f"Ollama –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {settings.text_model}")
            else:
                logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä LLM: {settings.llm_provider}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if not self.llm_client.is_available():
                logger.error("LLM –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    def test_media_processor(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞."""
        logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MediaProcessor ===")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            media_processor._ensure_directories()
            assert os.path.exists(settings.cache_audio_dir), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è audio –∫—ç—à–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
            logger.info("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—ç—à–∞ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
            stats = media_processor.get_cache_stats()
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {stats}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∏—Å—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            media_processor.cleanup_temp_files(max_age_hours=0)
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MediaProcessor: {e}")
            return False
    
    def test_text_processing(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ LLM."""
        logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ ===")
        
        if not self.init_llm_client():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LLM –∫–ª–∏–µ–Ω—Ç")
            return False
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            for i, text in enumerate(self.test_transcriptions, 1):
                logger.info(f"üîç –¢–µ—Å—Ç {i}: '{text}'")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ LLM
                response = self.llm_client.process_text(text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if response.orders:
                    logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(response.orders)}")
                    for order in response.orders:
                        logger.info(f"   üì¶ {order.order_id}: {order.status} - {order.comment or '–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ó–∞–∫–∞–∑—ã –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
                
                if response.requires_correction:
                    logger.info(f"‚ùì –¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è: {response.clarification_question}")
            
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return False
    
    def test_speech_client(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Speech –∫–ª–∏–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)."""
        logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Speech –∫–ª–∏–µ–Ω—Ç–∞ ===")
        
        if not self.init_speech_client():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Speech –∫–ª–∏–µ–Ω—Ç")
            return False
        
        try:
            logger.info("‚úÖ Speech –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
            logger.info("‚ÑπÔ∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã")
            
            # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞–º–∏
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–ª—Å—è
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Speech –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    def test_end_to_end_simulation(self):
        """–°–∏–º—É–ª—è—Ü–∏—è end-to-end —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logger.info("=== –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ ===")
        
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info("üé§ –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (—Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª)
            test_audio_content = b"fake_audio_data"
            test_filename = f"test_voice_{self.test_user_id}.ogg"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ–¥–∏–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª
            # (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –≤–∞–ª–∏–¥–∞—Ü–∏—è, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤)
            logger.info("üíæ –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞...")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            simulated_transcription = self.test_transcriptions[0]
            logger.info(f"üìù –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: '{simulated_transcription}'")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ LLM
            if self.llm_client:
                logger.info("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ LLM...")
                response = self.llm_client.process_text(simulated_transcription)
                
                if response.orders:
                    logger.info(f"‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {len(response.orders)} –∑–∞–∫–∞–∑–æ–≤")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è LLM –Ω–µ –∏–∑–≤–ª–µ–∫ –∑–∞–∫–∞–∑—ã –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                    return False
            else:
                logger.error("‚ùå LLM –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞")
        logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {settings.llm_provider} + {settings.speech_provider}")
        
        results = {
            "media_processor": self.test_media_processor(),
            "text_processing": self.test_text_processing(),
            "speech_client": self.test_speech_client(),
            "end_to_end": self.test_end_to_end_simulation()
        }
        
        # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        logger.info("=" * 50)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        passed = 0
        total = len(results)
        
        for test_name, result in results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            logger.info(f"   {test_name}: {status}")
            if result:
                passed += 1
        
        logger.info(f"üìà –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            logger.error(f"üí• {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    print("üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ OTK Assistant")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not settings.bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_runner = VoicePipelineTest()
    success = test_runner.run_all_tests()
    
    if success:
        print("\nüéâ –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–∞–π–ø–ª–∞–π–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É.")
    else:
        print("\nüí• –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –ø–∞–π–ø–ª–∞–π–Ω–æ–º.")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")
    
    return success


if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

