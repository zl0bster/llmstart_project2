"""
–¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ç–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ (–∏—Ç–µ—Ä–∞—Ü–∏—è 5).

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Vision API, –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.clients.vision_client import create_vision_client, GPT4VisionClient, OpenRouterVisionClient
from app.services.media_processor import media_processor
from app.prompts.system_prompts import get_vision_prompt
from app.core.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def test_vision_client_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Vision –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    logger.info("=== –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Vision –∫–ª–∏–µ–Ω—Ç–æ–≤ ===")
    
    try:
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è OpenRouter –∫–ª–∏–µ–Ω—Ç–∞
        if settings.openrouter_api_key:
            openrouter_client = create_vision_client(
                "openrouter",
                api_key=settings.openrouter_api_key,
                model=settings.vision_model
            )
            logger.info(f"‚úÖ OpenRouter Vision –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {type(openrouter_client)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            is_available = openrouter_client.is_available()
            logger.info(f"OpenRouter Vision API –¥–æ—Å—Ç—É–ø–µ–Ω: {is_available}")
        else:
            logger.warning("‚ùå OpenRouter API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è GPT-4 Vision –∫–ª–∏–µ–Ω—Ç–∞
        if settings.openai_api_key:
            gpt4_client = create_vision_client(
                "gpt4_vision",
                api_key=settings.openai_api_key,
                model="gpt-4-vision-preview"
            )
            logger.info(f"‚úÖ GPT-4 Vision –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {type(gpt4_client)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            is_available = gpt4_client.is_available()
            logger.info(f"GPT-4 Vision API –¥–æ—Å—Ç—É–ø–µ–Ω: {is_available}")
        else:
            logger.warning("‚ùå OpenAI API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        logger.info("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Vision –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        raise


def test_vision_prompt_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Vision API."""
    logger.info("=== –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ Vision –ø—Ä–æ–º–ø—Ç–∞ ===")
    
    try:
        vision_prompt = get_vision_prompt()
        logger.info(f"‚úÖ Vision –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –¥–ª–∏–Ω–∞: {len(vision_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {vision_prompt[:200]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ
        key_phrases = [
            "–ø—Ä–æ—Ç–æ–∫–æ–ª", "–û–¢–ö", "–∑–∞–∫–∞–∑–æ–≤", "—Å—Ç–∞—Ç—É—Å", 
            "–≥–æ–¥–Ω–æ", "–±—Ä–∞–∫", "–¥–æ—Ä–∞–±–æ—Ç–∫—É", "—Ç–µ–∫—Å—Ç"
        ]
        
        for phrase in key_phrases:
            if phrase in vision_prompt.lower():
                logger.info(f"‚úÖ –ö–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞ –Ω–∞–π–¥–µ–Ω–∞: '{phrase}'")
            else:
                logger.warning(f"‚ö†Ô∏è –ö–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: '{phrase}'")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Vision –ø—Ä–æ–º–ø—Ç–∞: {e}")
        raise


def test_media_processor_photo_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ MediaProcessor."""
    logger.info("=== –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ç–æ ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –±–µ–∑ PIL)
        test_image_data = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x02\x00\x00\x00\x90wS\xde'
        test_filename = "test_protocol.png"
        test_user_id = 12345
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        saved_path = media_processor.save_photo_file(
            test_image_data, test_filename, test_user_id
        )
        logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(saved_path):
            logger.info(f"‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(saved_path)} –±–∞–π—Ç")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            os.remove(saved_path)
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        else:
            logger.error("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {e}")
        raise


async def test_vision_api_mock():
    """–ú–æ–∫-—Ç–µ—Å—Ç Vision API (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)."""
    logger.info("=== –ú–æ–∫-—Ç–µ—Å—Ç Vision API ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        vision_client = None
        
        if settings.openrouter_api_key:
            vision_client = OpenRouterVisionClient(
                api_key=settings.openrouter_api_key,
                model=settings.vision_model
            )
            logger.info("‚úÖ OpenRouter Vision –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –º–æ–∫-—Ç–µ—Å—Ç–∞")
        elif settings.openai_api_key:
            vision_client = GPT4VisionClient(
                api_key=settings.openai_api_key,
                model="gpt-4-vision-preview"
            )
            logger.info("‚úÖ GPT-4 Vision –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –º–æ–∫-—Ç–µ—Å—Ç–∞")
        else:
            logger.warning("‚ùå –ù–µ—Ç API –∫–ª—é—á–µ–π –¥–ª—è Vision —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if vision_client and vision_client.is_available():
            logger.info("‚úÖ Vision API –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            logger.warning("‚ö†Ô∏è Vision API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            return
        
        logger.info("‚úÖ –ú–æ–∫-—Ç–µ—Å—Ç Vision API –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–∫-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Vision API: {e}")
        # –ù–µ raise, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ


def test_cache_directories():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∫—ç—à–∞."""
    logger.info("=== –¢–µ—Å—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∫—ç—à–∞ ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã
        cache_dirs = [
            settings.cache_dir,
            settings.cache_photos_dir,
            settings.cache_audio_dir
        ]
        
        for directory in cache_dirs:
            if os.path.exists(directory):
                logger.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {directory}")
            else:
                logger.warning(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory}")
                # –°–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                Path(directory).mkdir(parents=True, exist_ok=True)
                logger.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {directory}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        cache_stats = media_processor.get_cache_stats()
        logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {cache_stats}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∫—ç—à–∞: {e}")
        raise


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ (–∏—Ç–µ—Ä–∞—Ü–∏—è 5)")
    logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Vision: {settings.vision_provider} / {settings.vision_model}")
    
    try:
        # –¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        test_vision_client_creation()
        
        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
        test_vision_prompt_loading()
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–µ–¥–∏–∞
        test_media_processor_photo_validation()
        
        # –¢–µ—Å—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        test_cache_directories()
        
        # –ú–æ–∫-—Ç–µ—Å—Ç API
        await test_vision_api_mock()
        
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ–æ—Ç–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤ –±–æ—Ç")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
