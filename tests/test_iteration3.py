"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ 3: –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–µ—Å—Å–∏–∏.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã –∏ —Å–µ—Å—Å–∏–π.
"""

import os
import sys
import tempfile
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from app.core.database import init_database, reset_database
from app.core.migrations import run_migrations, create_default_admin_user
from app.services.session_manager import SessionManager
from app.services.data_service import DataService
from app.services.state_machine import StateMachine, state_machine
from app.models.schemas import BotState, OrderData, StatusEnum
from app.core.config import settings


def test_database_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        settings.database_url = "sqlite:///test_otk_assistant.db"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        success = run_migrations(reset=True)
        assert success, "–ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ —É—Å–ø–µ—à–Ω–æ"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_user = create_default_admin_user(telegram_id=12345, name="Test Admin")
        assert admin_user is not None, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
        assert admin_user.role == "admin", "–†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å admin"
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False


def test_session_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π...")
    
    try:
        sm = SessionManager(timeout_minutes=15)
        user_id = 12345
        user_name = "Test User"
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_id = sm.get_or_create_session(user_id, user_name)
        assert session_id is not None, "–°–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞"
        print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        current_state = sm.get_state(user_id)
        assert current_state == BotState.idle, "–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å idle"
        print(f"‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        success = sm.set_state(user_id, BotState.processing)
        assert success, "–ü–µ—Ä–µ—Ö–æ–¥ –≤ processing –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
        
        current_state = sm.get_state(user_id)
        assert current_state == BotState.processing, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å processing"
        print(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = sm.add_message(user_id, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        assert success, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ"
        
        messages = sm.get_session_history(user_id)
        assert len(messages) == 1, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        test_orders = [
            OrderData(order_id="12345", status=StatusEnum.approved, comment="–¢–µ—Å—Ç")
        ]
        success = sm.set_extracted_orders(user_id, test_orders)
        assert success, "–ó–∞–∫–∞–∑—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
        
        orders = sm.get_extracted_orders(user_id)
        assert len(orders) == 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∑–∞–∫–∞–∑"
        assert orders[0].order_id == "12345", "ID –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        print(f"‚úÖ –ó–∞–∫–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(orders)} –∑–∞–∫–∞–∑–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        session_info = sm.get_session_info(user_id)
        assert session_info is not None, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞"
        assert session_info['current_state'] == BotState.processing.value, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å processing"
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
        return False


def test_data_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–∏—Å–∞ –¥–∞–Ω–Ω—ã—Ö."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        ds = DataService()
        sm = SessionManager()
        
        user_id = 12345
        user_name = "Test User"
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        session_id = sm.get_or_create_session(user_id, user_name)
        
        test_orders = [
            OrderData(order_id="12345", status=StatusEnum.approved, comment="–¢–µ—Å—Ç –≥–æ–¥–Ω–æ"),
            OrderData(order_id="12346", status=StatusEnum.rework, comment="–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å")
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥
        success = sm.save_dialogue_to_db(
            user_id=user_id,
            user_message="–ó–∞–∫–∞–∑ 12345 - –≥–æ–¥–Ω–æ, –∑–∞–∫–∞–∑ 12346 - –≤ –¥–æ—Ä–∞–±–æ—Ç–∫—É",
            llm_response='{"orders": [...]}',
            system_prompt="–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –û–¢–ö",
            status="confirmed"
        )
        assert success, "–î–∏–∞–ª–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
        print("‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        inspections = ds.save_inspections(user_id, session_id, test_orders)
        assert len(inspections) == 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ 2 –ø—Ä–æ–≤–µ—Ä–∫–∏"
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(inspections)} –∑–∞–ø–∏—Å–µ–π")
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        success = ds.link_dialogues_to_inspections(session_id, inspections)
        assert success, "–î–∏–∞–ª–æ–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"
        print("‚úÖ –î–∏–∞–ª–æ–≥–∏ —Å–≤—è–∑–∞–Ω—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–æ–≤
        success = ds.update_dialogue_status(session_id, "confirmed")
        assert success, "–°—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω"
        print("‚úÖ –°—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = ds.get_user_statistics(user_id, days=7)
        assert stats is not None, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–∞"
        assert stats['total_inspections'] == 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –ø—Ä–æ–≤–µ—Ä–∫–∏"
        assert stats['approved'] == 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 –æ–¥–æ–±—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
        assert stats['rework'] == 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –¥–æ—Ä–∞–±–æ—Ç–∫—É"
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {stats['total_inspections']} –ø—Ä–æ–≤–µ—Ä–æ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_inspections = ds.get_user_inspections(user_id, limit=5)
        assert len(user_inspections) == 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –ø—Ä–æ–≤–µ—Ä–∫–∏"
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã: {len(user_inspections)} –∑–∞–ø–∏—Å–µ–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def test_state_machine():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        assert state_machine.can_transition(
            BotState.idle, BotState.processing, 
            {"has_input_data": True}
        ), "–ü–µ—Ä–µ—Ö–æ–¥ idle -> processing –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω"
        
        assert state_machine.can_transition(
            BotState.processing, BotState.confirmation,
            {"data_extracted": True}
        ), "–ü–µ—Ä–µ—Ö–æ–¥ processing -> confirmation –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω"
        
        assert not state_machine.can_transition(
            BotState.idle, BotState.confirmation,
            {}
        ), "–ü–µ—Ä–µ—Ö–æ–¥ idle -> confirmation –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω"
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        available = state_machine.get_available_transitions(
            BotState.idle, 
            {"has_input_data": True, "requested_reports": True}
        )
        assert BotState.processing in available, "processing –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω"
        assert BotState.reports_menu in available, "reports_menu –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω"
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: {[s.value for s in available]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
        return False


def cleanup_test_db():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        test_db_path = "test_otk_assistant.db"
        if os.path.exists(test_db_path):
            os.remove(test_db_path)
            print("üßπ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î: {e}")


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏—Ç–µ—Ä–∞—Ü–∏–∏ 3."""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ 3: –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–µ—Å—Å–∏–∏\n")
    
    tests = [
        test_database_initialization,
        test_session_manager,
        test_data_service,
        test_state_machine
    ]
    
    passed = 0
    total = len(tests)
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}\n")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    cleanup_test_db()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total - passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∏—Ç–µ—Ä–∞—Ü–∏–∏ 3 –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ ({total - passed} –æ—à–∏–±–æ–∫)")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
