# Правила разработки кода для ИИ-ассистента

## Утилиты и инструменты

### Основной стек разработки
- **Python 3.11+** с типизацией
- **aiogram** для Telegram Bot API
- **SQLAlchemy** для работы с БД
- **Pydantic** для валидации данных и схем

### Инструменты отладки и разработки
- **pytest** для тестирования
- **Python logging** для отладки и мониторинга
- **Docker** для контейнеризации
- **Makefile** для автоматизации задач

### Внешние API
- **OpenRouter API** для LLM
- **OpenAI Whisper** для обработки аудио
- **GPT-4 Vision** для анализа изображений

См. детали в @vision.md раздел "Технологический стек"

## Основные принципы разработки

### Философия KISS
- **Максимальная простота решений** - выбирай самое простое решение, которое работает
- **Никакого оверинжиниринга** - не усложняй архитектуру заранее
- **Быстрая проверка гипотез** - MVP для валидации идей

### Итеративный подход
- **MVP-first** - сначала минимально работающая версия
- **Быстрые циклы** разработка → тест → обратная связь
- **Fail fast, learn fast** - быстрое выявление и исправление ошибок

### Качество кода
- **Приоритет читаемости над оптимизацией** - понятный код важнее быстрого
- **Простые, понятные решения** - избегай "умных" решений
- **Рефакторинг при необходимости, но не заранее**

### Архитектурные принципы
- **Монолитная архитектура** без микросервисов на старте
- **Слоистая архитектура** - четкое разделение слоев (API, Business Logic, Data)
- **Stateless** - бот не хранит состояние между перезапусками
- **Единственная ответственность** - каждый модуль решает одну задачу

См. детали в @vision.md раздел "Принципы разработки"

## Стиль кода

### Python conventions
- **PEP 8** - стандартный стиль Python
- **Типизация** - используй type hints везде
- **Pydantic модели** для валидации входных/выходных данных
- **Docstrings** для публичных функций и классов

### Структура кода
- **Одна функция = одна ответственность** - каждая функция решает только одну задачу
- **Максимум 20 строк на функцию** - если больше, разбивай на подфункции
- **Говорящие имена** переменных и функций - имя должно объяснять назначение
- **Приоритет читаемости над оптимизацией** - понятный код важнее быстрого
- **Короткие функции** - легче тестировать и понимать
- **Комментарии** только там, где код неочевиден
- **Константы** в начале файла или в отдельном модуле

### Примеры хорошего стиля
```python
# ✅ Хорошо: говорящие имена, короткая функция
def extract_order_id(text: str) -> Optional[str]:
    """Извлекает номер заказа из текста."""
    pattern = r'\b\d{4,5}\b'
    match = re.search(pattern, text)
    return match.group(0) if match else None

# ✅ Хорошо: одна ответственность
def validate_order_data(order: OrderData) -> bool:
    """Проверяет корректность данных заказа."""
    return bool(order.order_id and order.status)

# ❌ Плохо: слишком длинная функция с множественными обязанностями
def process_user_message(message_text: str, user_id: int, session_id: str):
    # 50+ строк кода, делает много разных вещей
```

### Импорты
```python
# Стандартная библиотека
import logging
from typing import List, Optional

# Внешние библиотеки  
from aiogram import Bot
from pydantic import BaseModel

# Локальные модули
from app.core.config import settings
```

## Структура проекта

### Основные директории
- **app/** - основной код приложения
- **app/bot/** - логика Telegram бота
- **app/services/** - бизнес-логика
- **app/clients/** - клиенты внешних API
- **app/models/** - модели данных
- **app/core/** - конфигурация и общие компоненты

### Принципы организации
- **Модульность** - разделение по функциональности
- **Четкие границы** между слоями
- **Переиспользование** кода через общие модули
- **Изоляция** внешних зависимостей в clients/

См. детальную структуру в @vision.md раздел "Структура проекта"

## Работа с зависимостями

### Управление зависимостями
- **requirements.txt** для фиксации версий
- **Виртуальные окружения** для изоляции
- **Минимальные зависимости** - только необходимые пакеты
- **Обновления** только при необходимости

### Внешние API
- **Retry механизм** для временных ошибок
- **Таймауты** для всех HTTP запросов
- **Обработка ошибок** с логированием
- **Fallback** стратегии при недоступности сервисов

## Обработка ошибок

### Принципы обработки
- **Try-catch блоки** для всех внешних вызовов
- **Логирование всех ошибок** с контекстом
- **Уведомления пользователей** о проблемах через Telegram
- **Graceful degradation** - работа при частичных сбоях

### Логирование
- **Структурированные логи** с контекстом (chat_id, session_id)
- **Разные уровни** - DEBUG, INFO, WARNING, ERROR
- **Корреляция событий** через request_id
- **Безопасность** - маскировка секретов

### Типы ошибок
- **API ошибки** - retry с экспоненциальной задержкой
- **Валидация данных** - понятные сообщения пользователю
- **Системные ошибки** - логирование + fallback
- **Критические ошибки** - безопасное завершение

См. детали в @vision.md разделы "Обработка ошибок" и "Подход к логгированию"

## Конфигурация

### Подход к конфигурации
- **Единый источник правды** - .env + переменные окружения
- **Pydantic BaseSettings** для валидации настроек
- **Приоритет**: ENV переменные > .env > значения по умолчанию
- **Разделение секретов** - ключи API только в ENV

### Структура конфигурации
- **app/core/config.py** - централизованная конфигурация
- **Валидация** всех параметров при запуске
- **Типизация** всех настроек
- **Документация** параметров в .env.example

### Безопасность
- **Секреты** никогда не коммитятся
- **Маскировка** в логах
- **Валидация** обязательных параметров

См. детали в @vision.md раздел "Конфигурирование"

## Тестирование

### Подход к тестированию
- **Покрытие только критичных функций** - тестируй то, что важно
- **Приоритет интеграционных тестов** над unit-тестами
- **Ручное тестирование** основных сценариев обязательно
- **pytest** как основной фреймворк

### Типы тестов
- **Unit тесты** - изолированные функции и классы
- **Интеграционные тесты** - взаимодействие компонентов
- **End-to-end тесты** - полные пользовательские сценарии
- **API тесты** - внешние интеграции

### Принципы написания тестов
- **Простота** - тесты должны быть понятными
- **Изоляция** - каждый тест независим
- **Повторяемость** - одинаковый результат при повторном запуске
- **Быстрота** - тесты должны выполняться быстро

См. детали в @vision.md раздел "Принципы разработки" → "Тестирование"