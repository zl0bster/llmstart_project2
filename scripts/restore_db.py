#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö OTK Assistant –∏–∑ –±—ç–∫–∞–ø–∞.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SQLite –∏ PostgreSQL.
"""

import os
import sys
import shutil
import subprocess
import argparse
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.core.config import settings


def restore_sqlite_backup(backup_path: Path) -> None:
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞."""
    db_path = Path(settings.database_url.replace("sqlite:///", ""))
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if db_path.exists():
        backup_current = db_path.with_suffix(f".backup_{db_path.suffix}")
        shutil.copy2(db_path, backup_current)
        print(f"üìã –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–π –ë–î: {backup_current}")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
    shutil.copy2(backup_path, db_path)
    print(f"‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑: {backup_path}")
    print(f"üìÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤: {db_path}")


def restore_postgres_backup(backup_path: Path) -> None:
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞."""
    # –ü–∞—Ä—Å–∏–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_url = settings.database_url
    if not db_url.startswith("postgresql://"):
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π URL PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    url_parts = db_url.replace("postgresql://", "").split("/")
    if len(url_parts) != 2:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    auth_host, database = url_parts
    if "@" in auth_host:
        auth, host_port = auth_host.split("@")
        if ":" in auth:
            user, password = auth.split(":")
        else:
            user, password = auth, ""
    else:
        user, password = auth_host, ""
        host_port = "localhost:5432"
    
    if ":" in host_port:
        host, port = host_port.split(":")
    else:
        host, port = host_port, "5432"
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    backup_current_name = f"{database}_backup.sql"
    backup_current_path = backup_path.parent / backup_current_name
    
    env = os.environ.copy()
    if password:
        env["PGPASSWORD"] = password
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–π –ë–î
    dump_cmd = [
        "pg_dump",
        "-h", host,
        "-p", port,
        "-U", user,
        "-d", database,
        "-f", str(backup_current_path),
        "--verbose"
    ]
    
    try:
        subprocess.run(dump_cmd, env=env, check=True)
        print(f"üìã –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–π –ë–î: {backup_current_path}")
    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –ë–î: {e}")
        print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
    restore_cmd = [
        "psql",
        "-h", host,
        "-p", port,
        "-U", user,
        "-d", database,
        "-f", str(backup_path),
        "--verbose"
    ]
    
    try:
        subprocess.run(restore_cmd, env=env, check=True)
        print(f"‚úÖ PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑: {backup_path}")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    except FileNotFoundError:
        raise RuntimeError("psql –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL client tools.")


def extract_archive(archive_path: Path) -> Path:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –±—ç–∫–∞–ø–∞."""
    if not archive_path.suffix == ".gz" and not archive_path.suffix == ".tar.gz":
        return archive_path
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    temp_dir = archive_path.parent / "temp_restore"
    temp_dir.mkdir(exist_ok=True)
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
        shutil.unpack_archive(archive_path, temp_dir)
        
        # –ò—â–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_files = list(temp_dir.rglob("*.db")) + list(temp_dir.rglob("*.sql"))
        if not db_files:
            raise FileNotFoundError("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ")
        
        if len(db_files) > 1:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –ë–î: {[f.name for f in db_files]}")
            print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª")
        
        extracted_file = db_files[0]
        print(f"üì¶ –ò–∑–≤–ª–µ—á–µ–Ω —Ñ–∞–π–ª –∏–∑ –∞—Ä—Ö–∏–≤–∞: {extracted_file}")
        return extracted_file
        
    except Exception as e:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        shutil.rmtree(temp_dir, ignore_errors=True)
        raise e


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö OTK Assistant –∏–∑ –±—ç–∫–∞–ø–∞")
    parser.add_argument(
        "backup_path",
        type=str,
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±—ç–∫–∞–ø–∞"
    )
    parser.add_argument(
        "--force",
        action="store_true",
        help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )
    
    args = parser.parse_args()
    
    try:
        backup_path = Path(args.backup_path)
        
        if not backup_path.exists():
            print(f"‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_path}")
            sys.exit(1)
        
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞...")
        print(f"üìÅ –§–∞–π–ª –±—ç–∫–∞–ø–∞: {backup_path.absolute()}")
        print(f"üîó URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {settings.database_url}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not args.force:
            response = input("‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
            if response.lower() not in ['y', 'yes', '–¥–∞']:
                print("‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                sys.exit(0)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if backup_path.suffix in ['.gz', '.tar.gz']:
            backup_path = extract_archive(backup_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if settings.database_url.startswith("sqlite://"):
            restore_sqlite_backup(backup_path)
        elif settings.database_url.startswith("postgresql://"):
            restore_postgres_backup(backup_path)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {settings.database_url}")
        
        print(f"üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
