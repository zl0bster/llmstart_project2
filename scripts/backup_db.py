#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö OTK Assistant.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SQLite –∏ PostgreSQL.
"""

import os
import sys
import shutil
import subprocess
import argparse
from datetime import datetime
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.core.config import settings


def create_sqlite_backup(backup_dir: Path) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    db_path = Path(settings.database_url.replace("sqlite:///", ""))
    
    if not db_path.exists():
        raise FileNotFoundError(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_filename = f"otk_assistant_backup_{timestamp}.db"
    backup_path = backup_dir / backup_filename
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    shutil.copy2(db_path, backup_path)
    
    print(f"‚úÖ SQLite –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
    return str(backup_path)


def create_postgres_backup(backup_dir: Path) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    # –ü–∞—Ä—Å–∏–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_url = settings.database_url
    if not db_url.startswith("postgresql://"):
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π URL PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    # postgresql://user:password@host:port/database
    url_parts = db_url.replace("postgresql://", "").split("/")
    if len(url_parts) != 2:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    auth_host, database = url_parts
    if "@" in auth_host:
        auth, host_port = auth_host.split("@")
        if ":" in auth:
            user, password = auth.split(":")
        else:
            user, password = auth, ""
    else:
        user, password = auth_host, ""
        host_port = "localhost:5432"
    
    if ":" in host_port:
        host, port = host_port.split(":")
    else:
        host, port = host_port, "5432"
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_filename = f"otk_assistant_backup_{timestamp}.sql"
    backup_path = backup_dir / backup_filename
    
    # –ö–æ–º–∞–Ω–¥–∞ pg_dump
    env = os.environ.copy()
    if password:
        env["PGPASSWORD"] = password
    
    cmd = [
        "pg_dump",
        "-h", host,
        "-p", port,
        "-U", user,
        "-d", database,
        "-f", str(backup_path),
        "--verbose"
    ]
    
    try:
        result = subprocess.run(cmd, env=env, capture_output=True, text=True, check=True)
        print(f"‚úÖ PostgreSQL –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
        return str(backup_path)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PostgreSQL –±—ç–∫–∞–ø–∞: {e}")
        print(f"stdout: {e.stdout}")
        print(f"stderr: {e.stderr}")
        raise
    except FileNotFoundError:
        raise RuntimeError("pg_dump –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL client tools.")


def create_archive_backup(backup_path: str, backup_dir: Path) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –±—ç–∫–∞–ø–∞."""
    backup_file = Path(backup_path)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    archive_name = f"otk_assistant_backup_{timestamp}.tar.gz"
    archive_path = backup_dir / archive_name
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
    shutil.make_archive(
        str(archive_path).replace(".tar.gz", ""),
        "gztar",
        backup_file.parent,
        backup_file.name
    )
    
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    backup_file.unlink()
    
    print(f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {archive_path}")
    return str(archive_path)


def cleanup_old_backups(backup_dir: Path, keep_days: int = 7) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤."""
    if not backup_dir.exists():
        return
    
    cutoff_time = datetime.now().timestamp() - (keep_days * 24 * 60 * 60)
    removed_count = 0
    
    for backup_file in backup_dir.glob("otk_assistant_backup_*"):
        if backup_file.stat().st_mtime < cutoff_time:
            backup_file.unlink()
            removed_count += 1
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {backup_file.name}")
    
    if removed_count > 0:
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤")
    else:
        print("‚ÑπÔ∏è –°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö OTK Assistant")
    parser.add_argument(
        "--output-dir",
        type=str,
        default="downloads",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—ç–∫–∞–ø–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: downloads)"
    )
    parser.add_argument(
        "--archive",
        action="store_true",
        help="–°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ –±—ç–∫–∞–ø–∞"
    )
    parser.add_argument(
        "--cleanup-days",
        type=int,
        default=7,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±—ç–∫–∞–ø–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7)"
    )
    parser.add_argument(
        "--no-cleanup",
        action="store_true",
        help="–ù–µ —É–¥–∞–ª—è—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã"
    )
    
    args = parser.parse_args()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        backup_dir = Path(args.output_dir)
        backup_dir.mkdir(parents=True, exist_ok=True)
        
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {backup_dir.absolute()}")
        print(f"üîó URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {settings.database_url}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        if settings.database_url.startswith("sqlite://"):
            backup_path = create_sqlite_backup(backup_dir)
        elif settings.database_url.startswith("postgresql://"):
            backup_path = create_postgres_backup(backup_dir)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {settings.database_url}")
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if args.archive:
            backup_path = create_archive_backup(backup_path, backup_dir)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
        if not args.no_cleanup:
            cleanup_old_backups(backup_dir, args.cleanup_days)
        
        print(f"üéâ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {backup_path}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
